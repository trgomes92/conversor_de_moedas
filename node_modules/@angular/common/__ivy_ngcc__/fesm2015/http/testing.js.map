{"version":3,"file":"testing.js","sources":["../../../../../../packages/common/http/testing/src/api.ts","../../../../../../packages/common/http/testing/src/request.ts","../../../../../../packages/common/http/testing/src/backend.ts","../../../../../../packages/common/http/testing/src/module.ts","../../../../../../packages/common/http/testing/public_api.ts","../../../../../../packages/common/http/testing/index.ts","../../../../../../packages/common/http/testing/testing.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpRequest} from '@angular/common/http';\n\nimport {TestRequest} from './request';\n\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * @publicApi\n */\nexport interface RequestMatch {\n  method?: string;\n  url?: string;\n}\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nexport abstract class HttpTestingController {\n  /**\n   * Search for requests that match the given parameter, without any expectations.\n   */\n  abstract match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[];\n\n  /**\n   * Expect that a single request has been made which matches the given URL, and return its\n   * mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(url: string, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given parameters, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(params: RequestMatch, description?: string): TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given predicate function, and\n   * return its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(matchFn: ((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest;\n\n  /**\n   * Expect that a single request has been made which matches the given condition, and return\n   * its mock.\n   *\n   * If no such request has been made, or more than one such request has been made, fail with an\n   * error message including the given request description, if any.\n   */\n  abstract expectOne(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean),\n      description?: string): TestRequest;\n\n  /**\n   * Expect that no requests have been made which match the given URL.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(url: string, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given parameters.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(params: RequestMatch, description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given predicate function.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(matchFn: ((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Expect that no requests have been made which match the given condition.\n   *\n   * If a matching request has been made, fail with an error message including the given request\n   * description, if any.\n   */\n  abstract expectNone(\n      match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string): void;\n\n  /**\n   * Verify that no unmatched requests are outstanding.\n   *\n   * If any requests are outstanding, fail with an error message indicating which requests were not\n   * handled.\n   *\n   * If `ignoreCancelled` is not set (the default), `verify()` will also fail if cancelled requests\n   * were not explicitly matched.\n   */\n  abstract verify(opts?: {ignoreCancelled?: boolean}): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpErrorResponse, HttpEvent, HttpHeaders, HttpRequest, HttpResponse, HttpStatusCode} from '@angular/common/http';\nimport {Observer} from 'rxjs';\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nexport class TestRequest {\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n  get cancelled(): boolean {\n    return this._cancelled;\n  }\n\n  /**\n   * @internal set by `HttpClientTestingBackend`\n   */\n  _cancelled = false;\n\n  constructor(public request: HttpRequest<any>, private observer: Observer<HttpEvent<any>>) {}\n\n  /**\n   * Resolve the request by returning a body plus additional HTTP information (such as response\n   * headers) if provided.\n   * If the request specifies an expected body type, the body is converted into the requested type.\n   * Otherwise, the body is converted to `JSON` by default.\n   *\n   * Both successful and unsuccessful responses can be delivered via `flush()`.\n   */\n  flush(\n      body: ArrayBuffer|Blob|boolean|string|number|Object|(boolean|string|number|Object|null)[]|\n      null,\n      opts: {\n        headers?: HttpHeaders|{[name: string]: string | string[]},\n        status?: number,\n        statusText?: string,\n      } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const url = this.request.urlWithParams;\n    const headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let statusText: string|undefined = opts.statusText;\n    let status: number = opts.status !== undefined ? opts.status : HttpStatusCode.Ok;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = HttpStatusCode.NoContent;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>({body, headers, status, statusText, url}));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({error: body, headers, status, statusText, url}));\n    }\n  }\n\n  /**\n   * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n   */\n  error(error: ErrorEvent, opts: {\n    headers?: HttpHeaders|{[name: string]: string | string[]},\n    status?: number,\n    statusText?: string,\n  } = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    const headers =\n        (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams,\n    }));\n  }\n\n  /**\n   * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n   * request.\n   */\n  event(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body: ArrayBuffer|Blob|string|number|Object|\n                            (string | number | Object | null)[]): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body: ArrayBuffer|Blob|string|number|Object|\n                 (string | number | Object | null)[]): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(\n    body: ArrayBuffer|Blob|boolean|string|number|Object|\n    (boolean | string | number | Object | null)[],\n    format: string = 'JSON'): Object|string|number|(Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n      typeof body === 'boolean' || Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body: ArrayBuffer|Blob|string|number|Object|\n                     (string | number | Object | null)[]): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(\n    responseType: string,\n    body: ArrayBuffer|Blob|string|number|Object|(string | number | Object | null)[]|\n    null): ArrayBuffer|Blob|string|number|Object|(string | number | Object | null)[]|null {\n  if (body === null) {\n    return null;\n  }\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n    case 'blob':\n      return _toBlob(body);\n    case 'json':\n      return _toJsonBody(body);\n    case 'text':\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpTestingController, RequestMatch} from './api';\nimport {TestRequest} from './request';\n\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\n@Injectable()\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n  /**\n   * List of pending requests which have not yet been expected.\n   */\n  private open: TestRequest[] = [];\n\n  /**\n   * Handle an incoming request by queueing it in the list of open requests.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<any>) => {\n      const testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next({type: HttpEventType.Sent} as HttpEvent<any>);\n      return () => {\n        testReq._cancelled = true;\n      };\n    });\n  }\n\n  /**\n   * Helper function to search for requests in the list of open requests.\n   */\n  private _match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(\n          testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n              (!match.url || testReq.request.urlWithParams === match.url));\n    }\n  }\n\n  /**\n   * Search for requests in the list of open requests, and return all that match\n   * without asserting anything about the number of matches.\n   */\n  match(match: string|RequestMatch|((req: HttpRequest<any>) => boolean)): TestRequest[] {\n    const results = this._match(match);\n    results.forEach(result => {\n      const index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * Expect that a single outstanding request matches the given matcher, and return\n   * it.\n   *\n   * Requests returned through this API will no longer be in the list of open requests,\n   * and thus will not match twice.\n   */\n  expectOne(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      TestRequest {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(`Expected one matching request for criteria \"${description}\", found ${\n          matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      let message = `Expected one matching request for criteria \"${description}\", found none.`;\n      if (this.open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        const requests = this.open\n                             .map(testReq => {\n                               const url = testReq.request.urlWithParams;\n                               const method = testReq.request.method;\n                               return `${method} ${url}`;\n                             })\n                             .join(', ');\n        message += ` Requests received are: ${requests}.`;\n      }\n      throw new Error(message);\n    }\n    return matches[0];\n  }\n\n  /**\n   * Expect that no outstanding requests match the given matcher, and throw an error\n   * if any do.\n   */\n  expectNone(match: string|RequestMatch|((req: HttpRequest<any>) => boolean), description?: string):\n      void {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${\n          matches.length}.`);\n    }\n  }\n\n  /**\n   * Validate that there are no outstanding requests.\n   */\n  verify(opts: {ignoreCancelled?: boolean} = {}): void {\n    let open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const requests = open.map(testReq => {\n                             const url = testReq.request.urlWithParams.split('?')[0];\n                             const method = testReq.request.method;\n                             return `${method} ${url}`;\n                           })\n                           .join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n\n  private descriptionFromMatcher(matcher: string|RequestMatch|\n                                 ((req: HttpRequest<any>) => boolean)): string {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const method = matcher.method || '(any)';\n      const url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpBackend, HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\n\nimport {HttpTestingController} from './api';\nimport {HttpClientTestingBackend} from './backend';\n\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n */\n@NgModule({\n  imports: [\n    HttpClientModule,\n  ],\n  providers: [\n    HttpClientTestingBackend,\n    {provide: HttpBackend, useExisting: HttpClientTestingBackend},\n    {provide: HttpTestingController, useExisting: HttpClientTestingBackend},\n  ],\n})\nexport class HttpClientTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {HttpTestingController, RequestMatch} from './src/api';\nexport {HttpClientTestingModule} from './src/module';\nexport {TestRequest} from './src/request';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {HttpClientTestingBackend as ɵangular_packages_common_http_testing_testing_a} from './src/backend';"]}