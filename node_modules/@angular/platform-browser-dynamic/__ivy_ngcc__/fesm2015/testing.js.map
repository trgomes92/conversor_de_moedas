{"version":3,"file":"testing.js","sources":["../../../../../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts","../../../../../../packages/platform-browser-dynamic/testing/src/metadata_overrider.ts","../../../../../../packages/platform-browser-dynamic/testing/src/compiler_factory.ts","../../../../../../packages/platform-browser-dynamic/testing/src/platform_core_dynamic_testing.ts","../../../../../../packages/platform-browser-dynamic/testing/src/private_export_testing.ts","../../../../../../packages/platform-browser-dynamic/testing/src/testing.ts","../../../../../../packages/platform-browser-dynamic/testing/public_api.ts","../../../../../../packages/platform-browser-dynamic/testing/index.ts","../../../../../../packages/platform-browser-dynamic/testing/testing.ts"],"names":["getDOM","MetadataOverrider","stringify","platformCoreDynamic","TestingCompilerFactory","INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n@Injectable()\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override insertRootElement(rootElId: string) {\n    this.removeAllRootElements();\n    const rootElement = getDOM().getDefaultDocument().createElement('div');\n    rootElement.setAttribute('id', rootElId);\n    this._doc.body.appendChild(rootElement);\n  }\n\n  override removeAllRootElements() {\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = this._doc.querySelectorAll('[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// `MetadataOverrider` has been moved to core/testing to allow using it from the render3 TestBed\nexport {ɵMetadataOverrider as MetadataOverrider} from '@angular/core/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, DirectiveResolver, ERROR_COMPONENT_TYPE, NgModuleResolver, PipeResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver} from '@angular/compiler/testing';\nimport {CompilerFactory, CompilerOptions, Component, ComponentFactory, Directive, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, Pipe, StaticProvider, Type, ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompiler as TestingCompiler, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵCompilerImpl as CompilerImpl} from '@angular/platform-browser-dynamic';\n\nimport {MetadataOverrider} from './metadata_overrider';\n\nexport const COMPILER_PROVIDERS: StaticProvider[] = [\n  {provide: MockPipeResolver, deps: [CompileReflector]},\n  {provide: PipeResolver, useExisting: MockPipeResolver},\n  {provide: MockDirectiveResolver, deps: [CompileReflector]},\n  {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n  {provide: MockNgModuleResolver, deps: [CompileReflector]},\n  {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n];\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _injector: Injector, private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <CompilerImpl>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: CompilerImpl, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver) {}\n  get injector(): Injector {\n    return this._compiler.injector;\n  }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${stringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n    this.clearCacheFor(ngModule);\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata!, override));\n    this.clearCacheFor(directive);\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata!, override));\n    this.clearCacheFor(component);\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n    this.clearCacheFor(pipe);\n  }\n  loadAotSummaries(summaries: () => any[]) {\n    this._compiler.loadAotSummaries(summaries);\n  }\n  clearCache(): void {\n    this._compiler.clearCache();\n  }\n  clearCacheFor(type: Type<any>) {\n    this._compiler.clearCacheFor(type);\n  }\n\n  getComponentFromError(error: Error) {\n    return (error as any)[ERROR_COMPONENT_TYPE] || null;\n  }\n\n  getModuleId(moduleType: Type<any>): string|undefined {\n    return this._moduleResolver.resolve(moduleType, true).id;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMPILER_OPTIONS, CompilerFactory, createPlatformFactory, Injector, PlatformRef} from '@angular/core';\nimport {ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\nimport {COMPILER_PROVIDERS, TestingCompilerFactoryImpl} from './compiler_factory';\n\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\nexport const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(platformCoreDynamic, 'coreDynamicTesting', [\n      {provide: COMPILER_OPTIONS, useValue: {providers: COMPILER_PROVIDERS}, multi: true}, {\n        provide: TestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n      }\n    ]);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {DOMTestComponentRenderer as ɵDOMTestComponentRenderer} from './dom_test_component_renderer';\nexport {platformCoreDynamicTesting as ɵplatformCoreDynamicTesting} from './platform_core_dynamic_testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createPlatformFactory, NgModule, PlatformRef, StaticProvider} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from '@angular/platform-browser-dynamic';\nimport {BrowserTestingModule} from '@angular/platform-browser/testing';\n\nimport {DOMTestComponentRenderer} from './dom_test_component_renderer';\nimport {platformCoreDynamicTesting} from './platform_core_dynamic_testing';\n\nexport * from './private_export_testing';\n\n/**\n * @publicApi\n */\nexport const platformBrowserDynamicTesting = createPlatformFactory(\n    platformCoreDynamicTesting, 'browserDynamicTesting',\n    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserTestingModule],\n  providers: [\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n})\nexport class BrowserDynamicTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a,TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b} from './src/compiler_factory';"]}